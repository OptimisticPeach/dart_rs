#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_variables)]
#![allow(dead_code)]

// Hi there!
// This is a list of all the functions and exported items
// in the `dart_sys` crate.
//
// This is also a list of all the items which have an idiomatic
// binding here in the `dart` crate.
//
// If it is commented out, then is has a respective idiomatic
// binding in this crate. If not, then it is yet to have one
// made.
//

/* automatically generated by rust-bindgen */
pub const ILLEGAL_PORT: i64 = 0;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIdFAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdMAX: &'static [u8; 4usize] = b"lld\0";
pub const PRIdPTR: &'static [u8; 4usize] = b"lld\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIiFAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiMAX: &'static [u8; 4usize] = b"lli\0";
pub const PRIiPTR: &'static [u8; 4usize] = b"lli\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIoFAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoMAX: &'static [u8; 4usize] = b"llo\0";
pub const PRIoPTR: &'static [u8; 4usize] = b"llo\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIuFAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuMAX: &'static [u8; 4usize] = b"llu\0";
pub const PRIuPTR: &'static [u8; 4usize] = b"llu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIxFAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxMAX: &'static [u8; 4usize] = b"llx\0";
pub const PRIxPTR: &'static [u8; 4usize] = b"llx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIXFAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXMAX: &'static [u8; 4usize] = b"llX\0";
pub const PRIXPTR: &'static [u8; 4usize] = b"llX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 2usize] = b"d\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdMAX: &'static [u8; 4usize] = b"lld\0";
pub const SCNdPTR: &'static [u8; 4usize] = b"lld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 2usize] = b"i\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiMAX: &'static [u8; 4usize] = b"lli\0";
pub const SCNiPTR: &'static [u8; 4usize] = b"lli\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 2usize] = b"o\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoMAX: &'static [u8; 4usize] = b"llo\0";
pub const SCNoPTR: &'static [u8; 4usize] = b"llo\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 2usize] = b"u\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuMAX: &'static [u8; 4usize] = b"llu\0";
pub const SCNuPTR: &'static [u8; 4usize] = b"llu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 2usize] = b"x\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxMAX: &'static [u8; 4usize] = b"llx\0";
pub const SCNxPTR: &'static [u8; 4usize] = b"llx\0";
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const DART_FLAGS_CURRENT_VERSION: u32 = 11;
pub const DART_INITIALIZE_PARAMS_CURRENT_VERSION: u32 = 4;
pub const DART_KERNEL_ISOLATE_NAME: &'static [u8; 15usize] = b"kernel-service\0";
pub const DART_VM_SERVICE_ISOLATE_NAME: &'static [u8; 11usize] = b"vm-service\0";
pub const kVmSnapshotDataCSymbol: &'static [u8; 21usize] = b"_kDartVmSnapshotData\0";
pub const kVmSnapshotInstructionsCSymbol: &'static [u8; 29usize] =
    b"_kDartVmSnapshotInstructions\0";
pub const kIsolateSnapshotDataCSymbol: &'static [u8; 26usize] = b"_kDartIsolateSnapshotData\0";
pub const kIsolateSnapshotInstructionsCSymbol: &'static [u8; 34usize] =
    b"_kDartIsolateSnapshotInstructions\0";
pub const kVmSnapshotDataAsmSymbol: &'static [u8; 21usize] = b"_kDartVmSnapshotData\0";
pub const kVmSnapshotInstructionsAsmSymbol: &'static [u8; 29usize] =
    b"_kDartVmSnapshotInstructions\0";
pub const kIsolateSnapshotDataAsmSymbol: &'static [u8; 26usize] = b"_kDartIsolateSnapshotData\0";
pub const kIsolateSnapshotInstructionsAsmSymbol: &'static [u8; 34usize] =
    b"_kDartIsolateSnapshotInstructions\0";
pub const DART_EMBEDDER_INFORMATION_CURRENT_VERSION: u32 = 1;
pub const DART_TIMELINE_STREAM_API: u32 = 1;
pub const DART_TIMELINE_STREAM_COMPILER: u32 = 2;
pub const DART_TIMELINE_STREAM_DART: u32 = 4;
pub const DART_TIMELINE_STREAM_DEBUGGER: u32 = 8;
pub const DART_TIMELINE_STREAM_EMBEDDER: u32 = 16;
pub const DART_TIMELINE_STREAM_GC: u32 = 32;
pub const DART_TIMELINE_STREAM_ISOLATE: u32 = 64;
pub const DART_TIMELINE_STREAM_VM: u32 = 128;
pub const DART_TIMELINE_STREAM_ALL: u32 = 255;
pub const DART_TIMELINE_STREAM_DISABLE: u32 = 0;

//The following functions are not actually exported, but there is no plan to export them.

//| pub type va_list = *mut ::std::os::raw::c_char;
//|
//| // pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
//|
//| pub type wchar_t = ::std::os::raw::c_ushort;
//|
//| // pub fn __security_init_cookie();
//|
//| // pub fn __security_check_cookie(_StackCookie: usize);
//|
//| // pub fn __report_gsfailure(_StackCookie: usize);
//|
//| pub type __crt_bool = bool;
//|
//| // pub fn _invalid_parameter_noinfo();
//|
//| // pub fn _invalid_parameter_noinfo_noreturn();
//|
//| // pub fn _invoke_watson(
//| //     _Expression: *const wchar_t,
//| //     _FunctionName: *const wchar_t,
//| //     _FileName: *const wchar_t,
//| //     _LineNo: ::std::os::raw::c_uint,
//| //     _Reserved: usize,
//| // );
//|
//|
//| pub type errno_t = ::std::os::raw::c_int;
//| pub type wint_t = ::std::os::raw::c_ushort;
//| pub type wctype_t = ::std::os::raw::c_ushort;
//| pub type __time32_t = ::std::os::raw::c_long;
//| pub type __time64_t = ::std::os::raw::c_longlong;
//|
//| pub struct __crt_locale_data_public {
//|     pub _locale_pctype: *const ::std::os::raw::c_ushort,
//|     pub _locale_mb_cur_max: ::std::os::raw::c_int,
//|     pub _locale_lc_codepage: ::std::os::raw::c_uint,
//| }
//|
//| pub struct __crt_locale_pointers {
//|     pub locinfo: *mut __crt_locale_data,
//|     pub mbcinfo: *mut __crt_multibyte_data,
//| }
//|
//| pub type _locale_t = *mut __crt_locale_pointers;
//|
//| pub struct _Mbstatet {
//|     pub _Wchar: ::std::os::raw::c_ulong,
//|     pub _Byte: ::std::os::raw::c_ushort,
//|     pub _State: ::std::os::raw::c_ushort,
//| }
//|
//| pub type mbstate_t = _Mbstatet;
//| pub type time_t = __time64_t;
//| pub type rsize_t = usize;
//|
//| // pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
//|
//| pub type int_least8_t = ::std::os::raw::c_schar;
//| pub type int_least16_t = ::std::os::raw::c_short;
//| pub type int_least32_t = ::std::os::raw::c_int;
//| pub type int_least64_t = ::std::os::raw::c_longlong;
//| pub type uint_least8_t = ::std::os::raw::c_uchar;
//| pub type uint_least16_t = ::std::os::raw::c_ushort;
//| pub type uint_least32_t = ::std::os::raw::c_uint;
//| pub type uint_least64_t = ::std::os::raw::c_ulonglong;
//| pub type int_fast8_t = ::std::os::raw::c_schar;
//| pub type int_fast16_t = ::std::os::raw::c_int;
//| pub type int_fast32_t = ::std::os::raw::c_int;
//| pub type int_fast64_t = ::std::os::raw::c_longlong;
//| pub type uint_fast8_t = ::std::os::raw::c_uchar;
//| pub type uint_fast16_t = ::std::os::raw::c_uint;
//| pub type uint_fast32_t = ::std::os::raw::c_uint;
//| pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
//| pub type intmax_t = ::std::os::raw::c_longlong;
//| pub type uintmax_t = ::std::os::raw::c_ulonglong;
//|
//| pub struct _Lldiv_t {
//|     pub quot: intmax_t,
//|     pub rem: intmax_t,
//| }
//|
//| pub type imaxdiv_t = _Lldiv_t;
//|
//| // pub fn imaxabs(_Number: intmax_t) -> intmax_t;
//|
//| // pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
//|
//| // pub fn strtoimax(
//| //     _String: *const ::std::os::raw::c_char,
//| //     _EndPtr: *mut *mut ::std::os::raw::c_char,
//| //     _Radix: ::std::os::raw::c_int,
//| // ) -> intmax_t;
//|
//| // pub fn _strtoimax_l(
//| //     _String: *const ::std::os::raw::c_char,
//| //     _EndPtr: *mut *mut ::std::os::raw::c_char,
//| //     _Radix: ::std::os::raw::c_int,
//| //     _Locale: _locale_t,
//| // ) -> intmax_t;
//|
//| // pub fn strtoumax(
//| //     _String: *const ::std::os::raw::c_char,
//| //     _EndPtr: *mut *mut ::std::os::raw::c_char,
//| //     _Radix: ::std::os::raw::c_int,
//| // ) -> uintmax_t;
//|
//| // pub fn _strtoumax_l(
//| //     _String: *const ::std::os::raw::c_char,
//| //     _EndPtr: *mut *mut ::std::os::raw::c_char,
//| //     _Radix: ::std::os::raw::c_int,
//| //     _Locale: _locale_t,
//| // ) -> uintmax_t;
//|
//| // pub fn wcstoimax(
//| //     _String: *const wchar_t,
//| //     _EndPtr: *mut *mut wchar_t,
//| //     _Radix: ::std::os::raw::c_int,
//| // ) -> intmax_t;
//|
//| // pub fn _wcstoimax_l(
//| //     _String: *const wchar_t,
//| //     _EndPtr: *mut *mut wchar_t,
//| //     _Radix: ::std::os::raw::c_int,
//| //     _Locale: _locale_t,
//| // ) -> intmax_t;
//|
//| // pub fn wcstoumax(
//| //     _String: *const wchar_t,
//| //     _EndPtr: *mut *mut wchar_t,
//| //     _Radix: ::std::os::raw::c_int,
//| // ) -> uintmax_t;
//|
//| // pub fn _wcstoumax_l(
//| //     _String: *const wchar_t,
//| //     _EndPtr: *mut *mut wchar_t,
//| //     _Radix: ::std::os::raw::c_int,
//| //     _Locale: _locale_t,
//| // ) -> uintmax_t;

//End of falsely exported functions.

pub struct _Dart_Isolate {
    _unused: [u8; 0],
}

pub type Dart_Isolate = *mut _Dart_Isolate;

pub struct _Dart_Handle {
    _unused: [u8; 0],
}

pub type Dart_Handle = *mut _Dart_Handle;
pub type Dart_PersistentHandle = Dart_Handle;

pub struct _Dart_WeakPersistentHandle {
    _unused: [u8; 0],
}

pub type Dart_WeakPersistentHandle = *mut _Dart_WeakPersistentHandle;
pub type Dart_WeakPersistentHandleFinalizer = ::std::option::Option<
    unsafe extern "C" fn(
        isolate_callback_data: *mut ::std::os::raw::c_void,
        handle: Dart_WeakPersistentHandle,
        peer: *mut ::std::os::raw::c_void,
    ),
>;

// pub fn Dart_IsError(handle: Dart_Handle) -> bool;

// pub fn Dart_IsApiError(handle: Dart_Handle) -> bool;

// pub fn Dart_IsUnhandledExceptionError(handle: Dart_Handle) -> bool;

// pub fn Dart_IsCompilationError(handle: Dart_Handle) -> bool;

// pub fn Dart_IsFatalError(handle: Dart_Handle) -> bool;

// pub fn Dart_GetError(handle: Dart_Handle) -> *const ::std::os::raw::c_char;

// pub fn Dart_ErrorHasException(handle: Dart_Handle) -> bool;

// pub fn Dart_ErrorGetException(handle: Dart_Handle) -> Dart_Handle;

// pub fn Dart_ErrorGetStackTrace(handle: Dart_Handle) -> Dart_Handle;

// pub fn Dart_NewApiError(error: *const ::std::os::raw::c_char) -> Dart_Handle;

// pub fn Dart_NewCompilationError(error: *const ::std::os::raw::c_char) -> Dart_Handle;

// pub fn Dart_NewUnhandledExceptionError(exception: Dart_Handle) -> Dart_Handle;

// pub fn Dart_PropagateError(handle: Dart_Handle);

// pub fn Dart_ToString(object: Dart_Handle) -> Dart_Handle;

// pub fn Dart_IdentityEquals(obj1: Dart_Handle, obj2: Dart_Handle) -> bool;

pub fn Dart_HandleFromPersistent(object: Dart_PersistentHandle) -> Dart_Handle;

pub fn Dart_HandleFromWeakPersistent(object: Dart_WeakPersistentHandle) -> Dart_Handle;

pub fn Dart_NewPersistentHandle(object: Dart_Handle) -> Dart_PersistentHandle;

pub fn Dart_SetPersistentHandle(obj1: Dart_PersistentHandle, obj2: Dart_Handle);

pub fn Dart_DeletePersistentHandle(object: Dart_PersistentHandle);

pub fn Dart_NewWeakPersistentHandle(
    object: Dart_Handle,
    peer: *mut ::std::os::raw::c_void,
    external_allocation_size: isize,
    callback: Dart_WeakPersistentHandleFinalizer,
) -> Dart_WeakPersistentHandle;

pub fn Dart_DeleteWeakPersistentHandle(
    isolate: Dart_Isolate,
    object: Dart_WeakPersistentHandle,
);

// pub fn Dart_VersionString() -> *const ::std::os::raw::c_char;
pub struct Dart_QualifiedFunctionName {
    pub library_uri: *const ::std::os::raw::c_char,
    pub class_name: *const ::std::os::raw::c_char,
    pub function_name: *const ::std::os::raw::c_char,
}

pub struct Dart_IsolateFlags {
    pub version: i32,
    pub enable_asserts: bool,
    pub use_field_guards: bool,
    pub use_osr: bool,
    pub obfuscate: bool,
    pub entry_points: *mut Dart_QualifiedFunctionName,
    pub load_vmservice_library: bool,
    pub unsafe_trust_strong_mode_types: bool,
    pub copy_parent_code: bool,
}

pub fn Dart_IsolateFlagsInitialize(flags: *mut Dart_IsolateFlags);

pub type Dart_IsolateGroupCreateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        script_uri: *const ::std::os::raw::c_char,
        main: *const ::std::os::raw::c_char,
        package_root: *const ::std::os::raw::c_char,
        package_config: *const ::std::os::raw::c_char,
        flags: *mut Dart_IsolateFlags,
        callback_data: *mut ::std::os::raw::c_void,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> Dart_Isolate,
>;
pub type Dart_InitializeIsolateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        child_isolate_data: *mut *mut ::std::os::raw::c_void,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> bool,
>;
pub type Dart_IsolateUnhandledExceptionCallback =
::std::option::Option<unsafe extern "C" fn(error: Dart_Handle)>;
pub type Dart_IsolateShutdownCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isolate_group_data: *mut ::std::os::raw::c_void,
        isolate_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type Dart_IsolateCleanupCallback = ::std::option::Option<
    unsafe extern "C" fn(
        isolate_group_data: *mut ::std::os::raw::c_void,
        isolate_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type Dart_IsolateGroupCleanupCallback =
::std::option::Option<unsafe extern "C" fn(isolate_group_data: *mut ::std::os::raw::c_void)>;
pub type Dart_ThreadExitCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type Dart_FileOpenCallback = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        write: bool,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type Dart_FileReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut *mut u8,
        file_length: *mut isize,
        stream: *mut ::std::os::raw::c_void,
    ),
>;
pub type Dart_FileWriteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        length: isize,
        stream: *mut ::std::os::raw::c_void,
    ),
>;
pub type Dart_FileCloseCallback =
::std::option::Option<unsafe extern "C" fn(stream: *mut ::std::os::raw::c_void)>;
pub type Dart_EntropySource =
::std::option::Option<unsafe extern "C" fn(buffer: *mut u8, length: isize) -> bool>;
pub type Dart_GetVMServiceAssetsArchive =
::std::option::Option<unsafe extern "C" fn() -> Dart_Handle>;
pub type Dart_OnNewCodeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        observer: *mut Dart_CodeObserver,
        name: *const ::std::os::raw::c_char,
        base: usize,
        size: usize,
    ),
>;

pub struct Dart_CodeObserver {
    pub data: *mut ::std::os::raw::c_void,
    pub on_new_code: Dart_OnNewCodeCallback,
}

pub struct Dart_InitializeParams {
    pub version: i32,
    pub vm_snapshot_data: *const u8,
    pub vm_snapshot_instructions: *const u8,
    pub create_group: Dart_IsolateGroupCreateCallback,
    pub initialize_isolate: Dart_InitializeIsolateCallback,
    pub shutdown_isolate: Dart_IsolateShutdownCallback,
    pub cleanup_isolate: Dart_IsolateCleanupCallback,
    pub cleanup_group: Dart_IsolateGroupCleanupCallback,
    pub thread_exit: Dart_ThreadExitCallback,
    pub file_open: Dart_FileOpenCallback,
    pub file_read: Dart_FileReadCallback,
    pub file_write: Dart_FileWriteCallback,
    pub file_close: Dart_FileCloseCallback,
    pub entropy_source: Dart_EntropySource,
    pub get_service_assets: Dart_GetVMServiceAssetsArchive,
    pub start_kernel_isolate: bool,
    pub code_observer: *mut Dart_CodeObserver,
}

pub fn Dart_Initialize(params: *mut Dart_InitializeParams) -> *mut ::std::os::raw::c_char;

pub fn Dart_Cleanup() -> *mut ::std::os::raw::c_char;

pub fn Dart_SetVMFlags(
    argc: ::std::os::raw::c_int,
    argv: *mut *const ::std::os::raw::c_char,
) -> *mut ::std::os::raw::c_char;

pub fn Dart_IsVMFlagSet(flag_name: *const ::std::os::raw::c_char) -> bool;

pub fn Dart_CreateIsolateGroup(
    script_uri: *const ::std::os::raw::c_char,
    name: *const ::std::os::raw::c_char,
    isolate_snapshot_data: *const u8,
    isolate_snapshot_instructions: *const u8,
    flags: *mut Dart_IsolateFlags,
    isolate_group_data: *mut ::std::os::raw::c_void,
    isolate_data: *mut ::std::os::raw::c_void,
    error: *mut *mut ::std::os::raw::c_char,
) -> Dart_Isolate;

pub fn Dart_CreateIsolateGroupFromKernel(
    script_uri: *const ::std::os::raw::c_char,
    name: *const ::std::os::raw::c_char,
    kernel_buffer: *const u8,
    kernel_buffer_size: isize,
    flags: *mut Dart_IsolateFlags,
    isolate_group_data: *mut ::std::os::raw::c_void,
    isolate_data: *mut ::std::os::raw::c_void,
    error: *mut *mut ::std::os::raw::c_char,
) -> Dart_Isolate;

pub fn Dart_ShutdownIsolate();

pub fn Dart_CurrentIsolate() -> Dart_Isolate;

pub fn Dart_CurrentIsolateData() -> *mut ::std::os::raw::c_void;

pub fn Dart_IsolateData(isolate: Dart_Isolate) -> *mut ::std::os::raw::c_void;

pub fn Dart_CurrentIsolateGroupData() -> *mut ::std::os::raw::c_void;

pub fn Dart_IsolateGroupData(isolate: Dart_Isolate) -> *mut ::std::os::raw::c_void;

pub fn Dart_DebugName() -> Dart_Handle;

pub fn Dart_IsolateServiceId(isolate: Dart_Isolate) -> *const ::std::os::raw::c_char;

pub fn Dart_EnterIsolate(isolate: Dart_Isolate);

pub fn Dart_KillIsolate(isolate: Dart_Isolate);

pub fn Dart_NotifyIdle(deadline: i64);

pub fn Dart_NotifyLowMemory();

pub fn Dart_StartProfiling();

pub fn Dart_StopProfiling();

pub fn Dart_ThreadDisableProfiling();

pub fn Dart_ThreadEnableProfiling();

pub fn Dart_AddSymbols(
    dso_name: *const ::std::os::raw::c_char,
    buffer: *mut ::std::os::raw::c_void,
    buffer_size: isize,
);

pub fn Dart_ExitIsolate();

pub fn Dart_CreateSnapshot(
    vm_snapshot_data_buffer: *mut *mut u8,
    vm_snapshot_data_size: *mut isize,
    isolate_snapshot_data_buffer: *mut *mut u8,
    isolate_snapshot_data_size: *mut isize,
) -> Dart_Handle;

pub fn Dart_IsKernel(buffer: *const u8, buffer_size: isize) -> bool;

pub fn Dart_IsolateMakeRunnable(isolate: Dart_Isolate) -> *mut ::std::os::raw::c_char;

pub type Dart_Port = i64;
pub type Dart_MessageNotifyCallback =
::std::option::Option<unsafe extern "C" fn(dest_isolate: Dart_Isolate)>;

pub fn Dart_SetMessageNotifyCallback(message_notify_callback: Dart_MessageNotifyCallback);

pub fn Dart_GetMessageNotifyCallback() -> Dart_MessageNotifyCallback;

pub fn Dart_ShouldPauseOnStart() -> bool;

pub fn Dart_SetShouldPauseOnStart(should_pause: bool);

pub fn Dart_IsPausedOnStart() -> bool;

pub fn Dart_SetPausedOnStart(paused: bool);

pub fn Dart_ShouldPauseOnExit() -> bool;

pub fn Dart_SetShouldPauseOnExit(should_pause: bool);

pub fn Dart_IsPausedOnExit() -> bool;

pub fn Dart_SetPausedOnExit(paused: bool);

pub fn Dart_SetStickyError(error: Dart_Handle);

pub fn Dart_HasStickyError() -> bool;

pub fn Dart_GetStickyError() -> Dart_Handle;

// pub fn Dart_HandleMessage() -> Dart_Handle;
// pub fn Dart_WaitForEvent(timeout_millis: i64) -> Dart_Handle;
pub fn Dart_HandleServiceMessages() -> bool;

pub fn Dart_HasServiceMessages() -> bool;

pub fn Dart_RunLoop() -> Dart_Handle;

// pub fn Dart_GetMainPortId() -> Dart_Port;
pub fn Dart_HasLivePorts() -> bool;

// pub fn Dart_Post(port_id: Dart_Port, object: Dart_Handle) -> bool;
// pub fn Dart_NewSendPort(port_id: Dart_Port) -> Dart_Handle;
// pub fn Dart_SendPortGetId(port: Dart_Handle, port_id: *mut Dart_Port) -> Dart_Handle;
// pub fn Dart_EnterScope();
// pub fn Dart_ExitScope();
pub fn Dart_ScopeAllocate(size: isize) -> *mut u8;

// pub fn Dart_Null() -> Dart_Handle;
// pub fn Dart_EmptyString() -> Dart_Handle;
// pub fn Dart_IsNull(object: Dart_Handle) -> bool;
// pub fn Dart_ObjectEquals(obj1: Dart_Handle, obj2: Dart_Handle, equal: *mut bool)
//                              -> Dart_Handle;
// pub fn Dart_ObjectIsType(
//     object: Dart_Handle,
//     type_: Dart_Handle,
//     instanceof: *mut bool,
// ) -> Dart_Handle;

// pub fn Dart_IsInstance(object: Dart_Handle) -> bool;

// pub fn Dart_IsNumber(object: Dart_Handle) -> bool;

// pub fn Dart_IsInteger(object: Dart_Handle) -> bool;

// pub fn Dart_IsDouble(object: Dart_Handle) -> bool;

// pub fn Dart_IsBoolean(object: Dart_Handle) -> bool;

// pub fn Dart_IsString(object: Dart_Handle) -> bool;

// pub fn Dart_IsStringLatin1(object: Dart_Handle) -> bool;

// pub fn Dart_IsExternalString(object: Dart_Handle) -> bool;

// pub fn Dart_IsList(object: Dart_Handle) -> bool;

// pub fn Dart_IsMap(object: Dart_Handle) -> bool;

// pub fn Dart_IsLibrary(object: Dart_Handle) -> bool;

// pub fn Dart_IsType(handle: Dart_Handle) -> bool;

// pub fn Dart_IsFunction(handle: Dart_Handle) -> bool;

// pub fn Dart_IsVariable(handle: Dart_Handle) -> bool;

// pub fn Dart_IsTypeVariable(handle: Dart_Handle) -> bool;

// pub fn Dart_IsClosure(object: Dart_Handle) -> bool;

// pub fn Dart_IsTypedData(object: Dart_Handle) -> bool;

// pub fn Dart_IsByteBuffer(object: Dart_Handle) -> bool;

// pub fn Dart_IsFuture(object: Dart_Handle) -> bool;

// pub fn Dart_InstanceGetType(instance: Dart_Handle) -> Dart_Handle;

// pub fn Dart_ClassName(cls_type: Dart_Handle) -> Dart_Handle;

// pub fn Dart_FunctionName(function: Dart_Handle) -> Dart_Handle;

// pub fn Dart_FunctionOwner(function: Dart_Handle) -> Dart_Handle;

// pub fn Dart_FunctionIsStatic(function: Dart_Handle, is_static: *mut bool) -> Dart_Handle;

// pub fn Dart_IsTearOff(object: Dart_Handle) -> bool;

// pub fn Dart_ClosureFunction(closure: Dart_Handle) -> Dart_Handle;

// pub fn Dart_ClassLibrary(cls_type: Dart_Handle) -> Dart_Handle;

// pub fn Dart_IntegerFitsIntoInt64(integer: Dart_Handle, fits: *mut bool) -> Dart_Handle;

// pub fn Dart_IntegerFitsIntoUint64(integer: Dart_Handle, fits: *mut bool) -> Dart_Handle;

// pub fn Dart_NewInteger(value: i64) -> Dart_Handle;

// pub fn Dart_NewIntegerFromUint64(value: u64) -> Dart_Handle;

// pub fn Dart_NewIntegerFromHexCString(value: *const ::std::os::raw::c_char) -> Dart_Handle;

// pub fn Dart_IntegerToInt64(integer: Dart_Handle, value: *mut i64) -> Dart_Handle;

// pub fn Dart_IntegerToUint64(integer: Dart_Handle, value: *mut u64) -> Dart_Handle;

// pub fn Dart_IntegerToHexCString(
//     integer: Dart_Handle,
//     value: *mut *const ::std::os::raw::c_char,
// ) -> Dart_Handle;

// pub fn Dart_NewDouble(value: f64) -> Dart_Handle;

// pub fn Dart_DoubleValue(double_obj: Dart_Handle, value: *mut f64) -> Dart_Handle;

// pub fn Dart_GetStaticMethodClosure(
//     library: Dart_Handle,
//     cls_type: Dart_Handle,
//     function_name: Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_True() -> Dart_Handle;

// pub fn Dart_False() -> Dart_Handle;

// pub fn Dart_NewBoolean(value: bool) -> Dart_Handle;

// pub fn Dart_BooleanValue(boolean_obj: Dart_Handle, value: *mut bool) -> Dart_Handle;

// pub fn Dart_StringLength(str: Dart_Handle, length: *mut isize) -> Dart_Handle;

// pub fn Dart_NewStringFromCString(str: *const ::std::os::raw::c_char) -> Dart_Handle;

// pub fn Dart_NewStringFromUTF8(utf8_array: *const u8, length: isize) -> Dart_Handle;

// pub fn Dart_NewStringFromUTF16(utf16_array: *const u16, length: isize) -> Dart_Handle;

// pub fn Dart_NewStringFromUTF32(utf32_array: *const i32, length: isize) -> Dart_Handle;

pub fn Dart_NewExternalLatin1String(
    latin1_array: *const u8,
    length: isize,
    peer: *mut ::std::os::raw::c_void,
    external_allocation_size: isize,
    callback: Dart_WeakPersistentHandleFinalizer,
) -> Dart_Handle;

pub fn Dart_NewExternalUTF16String(
    utf16_array: *const u16,
    length: isize,
    peer: *mut ::std::os::raw::c_void,
    external_allocation_size: isize,
    callback: Dart_WeakPersistentHandleFinalizer,
) -> Dart_Handle;

// pub fn Dart_StringToCString(
//     str: Dart_Handle,
//     cstr: *mut *const ::std::os::raw::c_char,
// ) -> Dart_Handle;

// pub fn Dart_StringToUTF8(
//     str: Dart_Handle,
//     utf8_array: *mut *mut u8,
//     length: *mut isize,
// ) -> Dart_Handle;

pub fn Dart_StringToLatin1(
    str: Dart_Handle,
    latin1_array: *mut u8,
    length: *mut isize,
) -> Dart_Handle;

pub fn Dart_StringToUTF16(
    str: Dart_Handle,
    utf16_array: *mut u16,
    length: *mut isize,
) -> Dart_Handle;

// pub fn Dart_StringStorageSize(str: Dart_Handle, size: *mut isize) -> Dart_Handle;

pub fn Dart_StringGetProperties(
    str: Dart_Handle,
    char_size: *mut isize,
    str_len: *mut isize,
    peer: *mut *mut ::std::os::raw::c_void,
) -> Dart_Handle;

// pub fn Dart_NewList(length: isize) -> Dart_Handle;

// enum Dart_CoreType_Id {
//     Dynamic = 0,
//     Int = 1,
//     String = 2,
// }

// pub fn Dart_NewListOf(element_type_id: Dart_CoreType_Id, length: isize) -> Dart_Handle;

// pub fn Dart_NewListOfType(element_type: Dart_Handle, length: isize) -> Dart_Handle;

// pub fn Dart_ListLength(list: Dart_Handle, length: *mut isize) -> Dart_Handle;

// pub fn Dart_ListGetAt(list: Dart_Handle, index: isize) -> Dart_Handle;

// pub fn Dart_ListGetRange(
//     list: Dart_Handle,
//     offset: isize,
//     length: isize,
//     result: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_ListSetAt(list: Dart_Handle, index: isize, value: Dart_Handle) -> Dart_Handle;

pub fn Dart_ListGetAsBytes(
    list: Dart_Handle,
    offset: isize,
    native_array: *mut u8,
    length: isize,
) -> Dart_Handle;

pub fn Dart_ListSetAsBytes(
    list: Dart_Handle,
    offset: isize,
    native_array: *const u8,
    length: isize,
) -> Dart_Handle;

// pub fn Dart_MapGetAt(map: Dart_Handle, key: Dart_Handle) -> Dart_Handle;

// pub fn Dart_MapContainsKey(map: Dart_Handle, key: Dart_Handle) -> Dart_Handle;

// pub fn Dart_MapKeys(map: Dart_Handle) -> Dart_Handle;

pub enum Dart_TypedData_Type {
    ByteData = 0,
    Int8 = 1,
    Uint8 = 2,
    Uint8Clamped = 3,
    Int16 = 4,
    Uint16 = 5,
    Int32 = 6,
    Uint32 = 7,
    Int64 = 8,
    Uint64 = 9,
    Float32 = 10,
    Float64 = 11,
    Float32x4 = 12,
    Invalid = 13,
}

// pub fn Dart_GetTypeOfTypedData(object: Dart_Handle) -> Dart_TypedData_Type;

// pub fn Dart_GetTypeOfExternalTypedData(object: Dart_Handle) -> Dart_TypedData_Type;

// pub fn Dart_NewTypedData(type_: Dart_TypedData_Type, length: isize) -> Dart_Handle;

// pub fn Dart_NewExternalTypedData(
//     type_: Dart_TypedData_Type,
//     data: *mut ::std::os::raw::c_void,
//     length: isize,
// ) -> Dart_Handle;

// pub fn Dart_NewExternalTypedDataWithFinalizer(
//     type_: Dart_TypedData_Type,
//     data: *mut ::std::os::raw::c_void,
//     length: isize,
//     peer: *mut ::std::os::raw::c_void,
//     external_allocation_size: isize,
//     callback: Dart_WeakPersistentHandleFinalizer,
// ) -> Dart_Handle;

pub fn Dart_NewByteBuffer(typed_data: Dart_Handle) -> Dart_Handle;

pub fn Dart_TypedDataAcquireData(
    object: Dart_Handle,
    type_: *mut Dart_TypedData_Type,
    data: *mut *mut ::std::os::raw::c_void,
    len: *mut isize,
) -> Dart_Handle;

pub fn Dart_TypedDataReleaseData(object: Dart_Handle) -> Dart_Handle;

pub fn Dart_GetDataFromByteBuffer(byte_buffer: Dart_Handle) -> Dart_Handle;

// pub fn Dart_New(
//     type_: Dart_Handle,
//     constructor_name: Dart_Handle,
//     number_of_arguments: ::std::os::raw::c_int,
//     arguments: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_Allocate(type_: Dart_Handle) -> Dart_Handle;

pub fn Dart_AllocateWithNativeFields(
    type_: Dart_Handle,
    num_native_fields: isize,
    native_fields: *const isize,
) -> Dart_Handle;

// pub fn Dart_Invoke(
//     target: Dart_Handle,
//     name: Dart_Handle,
//     number_of_arguments: ::std::os::raw::c_int,
//     arguments: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_InvokeClosure(
//     closure: Dart_Handle,
//     number_of_arguments: ::std::os::raw::c_int,
//     arguments: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_InvokeConstructor(
//     object: Dart_Handle,
//     name: Dart_Handle,
//     number_of_arguments: ::std::os::raw::c_int,
//     arguments: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_GetField(container: Dart_Handle, name: Dart_Handle) -> Dart_Handle;

// pub fn Dart_SetField(
//     container: Dart_Handle,
//     name: Dart_Handle,
//     value: Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_ThrowException(exception: Dart_Handle) -> Dart_Handle;

// pub fn Dart_ReThrowException(exception: Dart_Handle, stacktrace: Dart_Handle) -> Dart_Handle;

pub fn Dart_GetNativeInstanceFieldCount(
    obj: Dart_Handle,
    count: *mut ::std::os::raw::c_int,
) -> Dart_Handle;

pub fn Dart_GetNativeInstanceField(
    obj: Dart_Handle,
    index: ::std::os::raw::c_int,
    value: *mut isize,
) -> Dart_Handle;

pub fn Dart_SetNativeInstanceField(
    obj: Dart_Handle,
    index: ::std::os::raw::c_int,
    value: isize,
) -> Dart_Handle;

pub struct _Dart_NativeArguments {
    _unused: [u8; 0],
}

pub type Dart_NativeArguments = *mut _Dart_NativeArguments;

pub fn Dart_GetNativeIsolateGroupData(
    args: Dart_NativeArguments,
) -> *mut ::std::os::raw::c_void;

pub enum Dart_NativeArgument_Type {
    Bool = 0,
    Int32 = 1,
    Uint32 = 2,
    Int64 = 3,
    Uint64 = 4,
    Double = 5,
    String = 6,
    Instance = 7,
    NativeFields = 8,
}

pub struct _Dart_NativeArgument_Descriptor {
    pub type_: Dart_NativeArgument_Type,
    pub index: u8,
}

pub type Dart_NativeArgument_Descriptor = _Dart_NativeArgument_Descriptor;

pub union Dart_NativeArgument_Value {
    pub as_bool: bool,
    pub as_int32: i32,
    pub as_uint32: u32,
    pub as_int64: i64,
    pub as_uint64: u64,
    pub as_double: f64,
    pub as_string: Dart_NativeString,
    pub as_native_fields: Dart_NativeFields,
    pub as_instance: Dart_Handle,
    _bindgen_union_align: [u64; 2usize],
}

pub struct Dart_NativeString {
    pub dart_str: Dart_Handle,
    pub peer: *mut ::std::os::raw::c_void,
}

pub struct Dart_NativeFields {
    pub num_fields: isize,
    pub values: *mut isize,
}

pub const kNativeArgNumberPos: i32 = 0;
pub const kNativeArgNumberSize: i32 = 8;
pub const kNativeArgTypePos: i32 = 8;
pub const kNativeArgTypeSize: i32 = 8;

// pub fn Dart_GetNativeArguments(
//     args: Dart_NativeArguments,
//     num_arguments: ::std::os::raw::c_int,
//     arg_descriptors: *const Dart_NativeArgument_Descriptor,
//     arg_values: *mut Dart_NativeArgument_Value,
// ) -> Dart_Handle;

// pub fn Dart_GetNativeArgument(
//     args: Dart_NativeArguments,
//     index: ::std::os::raw::c_int,
// ) -> Dart_Handle;

// pub fn Dart_GetNativeArgumentCount(args: Dart_NativeArguments) -> ::std::os::raw::c_int;

pub fn Dart_GetNativeFieldsOfArgument(
    args: Dart_NativeArguments,
    arg_index: ::std::os::raw::c_int,
    num_fields: ::std::os::raw::c_int,
    field_values: *mut isize,
) -> Dart_Handle;

pub fn Dart_GetNativeReceiver(args: Dart_NativeArguments, value: *mut isize) -> Dart_Handle;

// pub fn Dart_GetNativeStringArgument(
//     args: Dart_NativeArguments,
//     arg_index: ::std::os::raw::c_int,
//     peer: *mut *mut ::std::os::raw::c_void,
// ) -> Dart_Handle;

// pub fn Dart_GetNativeIntegerArgument(
//     args: Dart_NativeArguments,
//     index: ::std::os::raw::c_int,
//     value: *mut i64,
// ) -> Dart_Handle;

// pub fn Dart_GetNativeBooleanArgument(
//     args: Dart_NativeArguments,
//     index: ::std::os::raw::c_int,
//     value: *mut bool,
// ) -> Dart_Handle;

// pub fn Dart_GetNativeDoubleArgument(
//     args: Dart_NativeArguments,
//     index: ::std::os::raw::c_int,
//     value: *mut f64,
// ) -> Dart_Handle;

// pub fn Dart_SetReturnValue(args: Dart_NativeArguments, retval: Dart_Handle);

pub fn Dart_SetWeakHandleReturnValue(
    args: Dart_NativeArguments,
    rval: Dart_WeakPersistentHandle,
);

// pub fn Dart_SetBooleanReturnValue(args: Dart_NativeArguments, retval: bool);

// pub fn Dart_SetIntegerReturnValue(args: Dart_NativeArguments, retval: i64);

// pub fn Dart_SetDoubleReturnValue(args: Dart_NativeArguments, retval: f64);

pub type Dart_NativeFunction =
::std::option::Option<unsafe extern "C" fn(arguments: Dart_NativeArguments)>;
pub type Dart_NativeEntryResolver = ::std::option::Option<
    unsafe extern "C" fn(
        name: Dart_Handle,
        num_of_arguments: ::std::os::raw::c_int,
        auto_setup_scope: *mut bool,
    ) -> Dart_NativeFunction,
>;
pub type Dart_NativeEntrySymbol =
::std::option::Option<unsafe extern "C" fn(nf: Dart_NativeFunction) -> *const u8>;
pub type Dart_EnvironmentCallback =
::std::option::Option<unsafe extern "C" fn(name: Dart_Handle) -> Dart_Handle>;

pub fn Dart_SetEnvironmentCallback(callback: Dart_EnvironmentCallback) -> Dart_Handle;

pub fn Dart_SetNativeResolver(
    library: Dart_Handle,
    resolver: Dart_NativeEntryResolver,
    symbol: Dart_NativeEntrySymbol,
) -> Dart_Handle;

pub fn Dart_GetNativeResolver(
    library: Dart_Handle,
    resolver: *mut Dart_NativeEntryResolver,
) -> Dart_Handle;

pub fn Dart_GetNativeSymbol(
    library: Dart_Handle,
    resolver: *mut Dart_NativeEntrySymbol,
) -> Dart_Handle;

pub enum Dart_LibraryTag {
    CanonicalizeUrl = 0,
    ImportTag = 1,
    KernelTag = 2,
    ImportExtensionTag = 3,
}

pub type Dart_LibraryTagHandler = ::std::option::Option<
    unsafe extern "C" fn(
        tag: Dart_LibraryTag,
        library_or_package_map_url: Dart_Handle,
        url: Dart_Handle,
    ) -> Dart_Handle,
>;

pub fn Dart_SetLibraryTagHandler(handler: Dart_LibraryTagHandler) -> Dart_Handle;

pub fn Dart_DefaultCanonicalizeUrl(base_url: Dart_Handle, url: Dart_Handle) -> Dart_Handle;

pub fn Dart_LoadScriptFromKernel(kernel_buffer: *const u8, kernel_size: isize) -> Dart_Handle;

pub fn Dart_RootLibrary() -> Dart_Handle;

pub fn Dart_SetRootLibrary(library: Dart_Handle) -> Dart_Handle;

// pub fn Dart_GetType(
//     library: Dart_Handle,
//     class_name: Dart_Handle,
//     number_of_type_arguments: isize,
//     type_arguments: *mut Dart_Handle,
// ) -> Dart_Handle;

// pub fn Dart_GetClass(library: Dart_Handle, class_name: Dart_Handle) -> Dart_Handle;

// pub fn Dart_LibraryUrl(library: Dart_Handle) -> Dart_Handle;

// pub fn Dart_LibraryResolvedUrl(library: Dart_Handle) -> Dart_Handle;

pub fn Dart_GetLoadedLibraries() -> Dart_Handle;

pub fn Dart_LookupLibrary(url: Dart_Handle) -> Dart_Handle;

pub fn Dart_LibraryHandleError(library: Dart_Handle, error: Dart_Handle) -> Dart_Handle;

pub fn Dart_LoadLibraryFromKernel(
    kernel_buffer: *const u8,
    kernel_buffer_size: isize,
) -> Dart_Handle;

pub fn Dart_GetImportsOfScheme(scheme: Dart_Handle) -> Dart_Handle;

pub fn Dart_FinalizeLoading(complete_futures: bool) -> Dart_Handle;

pub fn Dart_GetPeer(object: Dart_Handle, peer: *mut *mut ::std::os::raw::c_void)
                    -> Dart_Handle;

pub fn Dart_SetPeer(object: Dart_Handle, peer: *mut ::std::os::raw::c_void) -> Dart_Handle;

pub const Dart_KernelCompilationStatus_Dart_KernelCompilationStatus_Unknown:
Dart_KernelCompilationStatus = -1;
pub const Dart_KernelCompilationStatus_Dart_KernelCompilationStatus_Ok:
Dart_KernelCompilationStatus = 0;
pub const Dart_KernelCompilationStatus_Dart_KernelCompilationStatus_Error:
Dart_KernelCompilationStatus = 1;
pub const Dart_KernelCompilationStatus_Dart_KernelCompilationStatus_Crash:
Dart_KernelCompilationStatus = 2;

pub type Dart_KernelCompilationStatus = i32;

pub struct Dart_KernelCompilationResult {
    pub status: Dart_KernelCompilationStatus,
    pub error: *mut ::std::os::raw::c_char,
    pub kernel: *mut u8,
    pub kernel_size: isize,
}

pub fn Dart_IsKernelIsolate(isolate: Dart_Isolate) -> bool;

pub fn Dart_KernelIsolateIsRunning() -> bool;

pub fn Dart_KernelPort() -> Dart_Port;

pub fn Dart_CompileToKernel(
    script_uri: *const ::std::os::raw::c_char,
    platform_kernel: *const u8,
    platform_kernel_size: isize,
    incremental_compile: bool,
    package_config: *const ::std::os::raw::c_char,
) -> Dart_KernelCompilationResult;

pub struct Dart_SourceFile {
    pub uri: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
}

pub fn Dart_CompileSourcesToKernel(
    script_uri: *const ::std::os::raw::c_char,
    platform_kernel: *const u8,
    platform_kernel_size: isize,
    source_files_count: ::std::os::raw::c_int,
    source_files: *mut Dart_SourceFile,
    incremental_compile: bool,
    package_config: *const ::std::os::raw::c_char,
    multiroot_filepaths: *const ::std::os::raw::c_char,
    multiroot_scheme: *const ::std::os::raw::c_char,
) -> Dart_KernelCompilationResult;

pub fn Dart_KernelListDependencies() -> Dart_KernelCompilationResult;

pub fn Dart_SetDartLibrarySourcesKernel(
    platform_kernel: *const u8,
    platform_kernel_size: isize,
);

pub fn Dart_IsServiceIsolate(isolate: Dart_Isolate) -> bool;

pub fn Dart_ServiceWaitForLoadPort() -> Dart_Port;

pub fn Dart_WriteProfileToTimeline(
    main_port: Dart_Port,
    error: *mut *mut ::std::os::raw::c_char,
) -> bool;

pub fn Dart_SaveCompilationTrace(
    buffer: *mut *mut u8,
    buffer_length: *mut isize,
) -> Dart_Handle;

pub fn Dart_LoadCompilationTrace(buffer: *mut u8, buffer_length: isize) -> Dart_Handle;

pub fn Dart_SaveTypeFeedback(buffer: *mut *mut u8, buffer_length: *mut isize) -> Dart_Handle;

pub fn Dart_LoadTypeFeedback(buffer: *mut u8, buffer_length: isize) -> Dart_Handle;

pub fn Dart_Precompile() -> Dart_Handle;

pub type Dart_StreamingWriteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_data: *mut ::std::os::raw::c_void,
        buffer: *const u8,
        size: isize,
    ),
>;

pub fn Dart_CreateAppAOTSnapshotAsAssembly(
    callback: Dart_StreamingWriteCallback,
    callback_data: *mut ::std::os::raw::c_void,
) -> Dart_Handle;

pub fn Dart_CreateAppAOTSnapshotAsElf(
    callback: Dart_StreamingWriteCallback,
    callback_data: *mut ::std::os::raw::c_void,
    stripped: bool,
) -> Dart_Handle;

pub fn Dart_CreateVMAOTSnapshotAsAssembly(
    callback: Dart_StreamingWriteCallback,
    callback_data: *mut ::std::os::raw::c_void,
) -> Dart_Handle;

pub fn Dart_CreateAppAOTSnapshotAsBlobs(
    vm_snapshot_data_buffer: *mut *mut u8,
    vm_snapshot_data_size: *mut isize,
    vm_snapshot_instructions_buffer: *mut *mut u8,
    vm_snapshot_instructions_size: *mut isize,
    isolate_snapshot_data_buffer: *mut *mut u8,
    isolate_snapshot_data_size: *mut isize,
    isolate_snapshot_instructions_buffer: *mut *mut u8,
    isolate_snapshot_instructions_size: *mut isize,
) -> Dart_Handle;

pub fn Dart_SortClasses() -> Dart_Handle;

pub fn Dart_CreateAppJITSnapshotAsBlobs(
    isolate_snapshot_data_buffer: *mut *mut u8,
    isolate_snapshot_data_size: *mut isize,
    isolate_snapshot_instructions_buffer: *mut *mut u8,
    isolate_snapshot_instructions_size: *mut isize,
) -> Dart_Handle;

pub fn Dart_CreateCoreJITSnapshotAsBlobs(
    vm_snapshot_data_buffer: *mut *mut u8,
    vm_snapshot_data_size: *mut isize,
    vm_snapshot_instructions_buffer: *mut *mut u8,
    vm_snapshot_instructions_size: *mut isize,
    isolate_snapshot_data_buffer: *mut *mut u8,
    isolate_snapshot_data_size: *mut isize,
    isolate_snapshot_instructions_buffer: *mut *mut u8,
    isolate_snapshot_instructions_size: *mut isize,
) -> Dart_Handle;

pub fn Dart_GetObfuscationMap(buffer: *mut *mut u8, buffer_length: *mut isize) -> Dart_Handle;

pub fn Dart_IsPrecompiledRuntime() -> bool;

pub fn Dart_DumpNativeStackTrace(context: *mut ::std::os::raw::c_void);

pub fn Dart_PrepareToAbort();

pub enum Dart_CObject_Type {
    Null = 0,
    Bool = 1,
    Int32 = 2,
    Int64 = 3,
    Double = 4,
    String = 5,
    Array = 6,
    TypedData = 7,
    ExternalTypedData = 8,
    SendPort = 9,
    Capability = 10,
    Unsupported = 11,
    NumberOfTypes = 12,
}

pub struct Dart_CObject {
    pub type_: Dart_CObject_Type,
    pub value: Dart_CObjectValue,
}

pub union Dart_CObjectValue {
    pub as_bool: bool,
    pub as_int32: i32,
    pub as_int64: i64,
    pub as_double: f64,
    pub as_string: *mut ::std::os::raw::c_char,
    pub as_send_port: Dart_SendPort,
    pub as_capability: Dart_Capability,
    pub as_array: Dart_Array,
    pub as_typed_data: Dart_TypedData,
    pub as_external_typed_data: Dart_ExternalTypedData,
    _bindgen_union_align: [u64; 5usize],
}

pub struct Dart_SendPort {
    pub id: Dart_Port,
    pub origin_id: Dart_Port,
}

pub struct Dart_Capability {
    pub id: i64,
}

pub struct Dart_Array {
    pub length: isize,
    pub values: *mut *mut Dart_CObject,
}

pub struct Dart_TypedData {
    pub type_: Dart_TypedData_Type,
    pub length: isize,
    pub values: *mut u8,
}

pub struct Dart_ExternalTypedData {
    pub type_: Dart_TypedData_Type,
    pub length: isize,
    pub data: *mut u8,
    pub peer: *mut ::std::os::raw::c_void,
    pub callback: Dart_WeakPersistentHandleFinalizer,
}

// pub fn Dart_PostCObject(port_id: Dart_Port, message: *mut Dart_CObject) -> bool;

// pub fn Dart_PostInteger(port_id: Dart_Port, message: i64) -> bool;

pub type Dart_NativeMessageHandler = ::std::option::Option<
    unsafe extern "C" fn(dest_port_id: Dart_Port, message: *mut Dart_CObject),
>;

// pub fn Dart_NewNativePort(
//     name: *const ::std::os::raw::c_char,
//     handler: Dart_NativeMessageHandler,
//     handle_concurrently: bool,
// ) -> Dart_Port;

// pub fn Dart_CloseNativePort(native_port_id: Dart_Port) -> bool;

pub fn Dart_CompileAll() -> Dart_Handle;

pub fn Dart_ReadAllBytecode() -> Dart_Handle;

pub fn Dart_FinalizeAllClasses() -> Dart_Handle;

pub fn Dart_ExecuteInternalCommand(
    command: *const ::std::os::raw::c_char,
    arg: *mut ::std::os::raw::c_void,
) -> *mut ::std::os::raw::c_void;

pub type Dart_ServiceRequestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const ::std::os::raw::c_char,
        param_keys: *mut *const ::std::os::raw::c_char,
        param_values: *mut *const ::std::os::raw::c_char,
        num_params: isize,
        user_data: *mut ::std::os::raw::c_void,
        json_object: *mut *const ::std::os::raw::c_char,
    ) -> bool,
>;

pub fn Dart_RegisterIsolateServiceRequestCallback(
    method: *const ::std::os::raw::c_char,
    callback: Dart_ServiceRequestCallback,
    user_data: *mut ::std::os::raw::c_void,
);

pub fn Dart_RegisterRootServiceRequestCallback(
    method: *const ::std::os::raw::c_char,
    callback: Dart_ServiceRequestCallback,
    user_data: *mut ::std::os::raw::c_void,
);

pub struct Dart_EmbedderInformation {
    pub version: i32,
    pub name: *const ::std::os::raw::c_char,
    pub current_rss: i64,
    pub max_rss: i64,
}

pub type Dart_EmbedderInformationCallback =
::std::option::Option<unsafe extern "C" fn(info: *mut Dart_EmbedderInformation)>;

pub fn Dart_SetEmbedderInformationCallback(callback: Dart_EmbedderInformationCallback);

pub fn Dart_InvokeVMServiceMethod(
    request_json: *mut u8,
    request_json_length: isize,
    response_json: *mut *mut u8,
    response_json_length: *mut isize,
    error: *mut *mut ::std::os::raw::c_char,
) -> bool;

pub type Dart_ServiceStreamListenCallback =
::std::option::Option<unsafe extern "C" fn(stream_id: *const ::std::os::raw::c_char) -> bool>;
pub type Dart_ServiceStreamCancelCallback =
::std::option::Option<unsafe extern "C" fn(stream_id: *const ::std::os::raw::c_char)>;

pub fn Dart_SetServiceStreamCallbacks(
    listen_callback: Dart_ServiceStreamListenCallback,
    cancel_callback: Dart_ServiceStreamCancelCallback,
) -> *mut ::std::os::raw::c_char;

pub type Dart_NativeStreamConsumer =
::std::option::Option<unsafe extern "C" fn(event_json: *const u8, event_json_length: isize)>;

pub fn Dart_SetNativeServiceStreamCallback(
    consumer: Dart_NativeStreamConsumer,
    stream_id: *const ::std::os::raw::c_char,
);

pub fn Dart_ServiceSendDataEvent(
    stream_id: *const ::std::os::raw::c_char,
    event_kind: *const ::std::os::raw::c_char,
    bytes: *const u8,
    bytes_length: isize,
) -> Dart_Handle;

pub type Dart_FileModifiedCallback = ::std::option::Option<
    unsafe extern "C" fn(url: *const ::std::os::raw::c_char, since: i64) -> bool,
>;

pub fn Dart_SetFileModifiedCallback(
    file_modified_callback: Dart_FileModifiedCallback,
) -> *mut ::std::os::raw::c_char;

pub fn Dart_IsReloading() -> bool;

pub fn Dart_TimelineGetMicros() -> i64;

pub fn Dart_GlobalTimelineSetRecordedStreams(stream_mask: i64);

pub enum Dart_Timeline_Event_Type {
    Begin = 0,
    End = 1,
    Instant = 2,
    Duration = 3,
    Async_Begin = 4,
    Async_End = 5,
    Async_Instant = 6,
    Counter = 7,
    Flow_Begin = 8,
    Flow_Step = 9,
    Flow_End = 10,
}

pub fn Dart_TimelineEvent(
    label: *const ::std::os::raw::c_char,
    timestamp0: i64,
    timestamp1_or_async_id: i64,
    type_: Dart_Timeline_Event_Type,
    argument_count: isize,
    argument_names: *mut *const ::std::os::raw::c_char,
    argument_values: *mut *const ::std::os::raw::c_char,
);

// pub fn Dart_SetThreadName(name: *const ::std::os::raw::c_char);

pub fn Dart_VMIsolateCountMetric() -> i64;

pub fn Dart_VMCurrentRSSMetric() -> i64;

pub fn Dart_VMPeakRSSMetric() -> i64;

pub fn Dart_IsolateHeapOldUsedMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapOldUsedMaxMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapOldCapacityMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapOldCapacityMaxMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapOldExternalMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapNewUsedMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapNewUsedMaxMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapNewCapacityMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapNewCapacityMaxMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapNewExternalMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapGlobalUsedMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateHeapGlobalUsedMaxMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateRunnableLatencyMetric(isolate: Dart_Isolate) -> i64;

pub fn Dart_IsolateRunnableHeapSizeMetric(isolate: Dart_Isolate) -> i64;

pub struct __crt_locale_data {
    pub _address: u8,
}

pub struct __crt_multibyte_data {
    pub _address: u8,
}
